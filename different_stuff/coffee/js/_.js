// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';

  /*
  long comment here
   */
  var Person, WebDeveloper, a, action, arr, b, book, c, car, d, element, event, first_range, fn, func, greet, i, index, isReady, j, k, l, len, len1, len2, long_regExp, m, message, model, n, newRange, normalize, o, object, online, outer, p, page, person, primeNumbers, property, q, r, range, ref, ref1, ref2, ref3, ref4, ref5, regExp, results, s, str, type, value,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice,
    hasProp = {}.hasOwnProperty,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  a = 10;

  b = 20;

  c = 30;

  online = true;

  isReady = false;

  str = 'very long string';

  arr = [1, 2, 3, 4, 5];

  first_range = [1, 2, 3, 4, 5];

  range = (function() {
    results = [];
    for (j = 1; j < 25; j++){ results.push(j); }
    return results;
  }).apply(this);

  range.slice(0, 11);

  range.slice(2);

  range.slice(0);

  newRange = range.slice(0);

  regExp = /^4[0-9]/;

  long_regExp = /[0-9]^5[1-5]?{7}(?:[0-9]{3})?$/;

  first && second;

  true || false;

  first && second;

  true || false;

  !isReady || !isOnline;

  a === b;

  a !== b;

  a === !b;

  if ((10 < a && a < 20)) {
    update(a);
  }

  if (a < 10) {
    update(a, b);
  }

  ref = [b, a], a = ref[0], b = ref[1];

  ref1 = [10, 20], c = ref1[0], d = ref1[1];

  car = {
    make: 'Porsche',
    model: '911 Turbo',
    engine: {
      type: 'v8',
      hp: 478
    },
    cost: 60000
  };

  model = car.model, (ref2 = car.engine, type = ref2.type);

  Person = (function() {
    function Person(name, age, lastVisit) {
      this.name = name;
      this.age = age;
      this.lastVisit = Date.now();
    }

    return Person;

  })();

  person = new Person('John', 20, '2020');

  'age' in person;

  range = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19];

  indexOf.call(range, 14) >= 0;

  country === 'Russian' || country === 'Ukraine';

  book = 0;

  if (book) {
    open(book);
  }

  page = 0;

  if (page != null) {
    if (typeof open === "function") {
      open(page);
    }
  }

  if (page !== null) {
    open(page);
  }

  object = {};

  if (object.speed == null) {
    object.speed = 100;
  }

  this.age = config.age || 10;

  this.age = (ref3 = config.age) != null ? ref3 : 10;

  this.value = (ref4 = config.value()) != null ? ref4 : 10;

  object.value = object.value || 100;

  object.value || (object.value = 100);

  object.value && (object.value = 100);


  /* function instruction
  var greet
  
  greet = function(name) {
    return 'Hello, ' + name + '!'
  }
  Always like that
  In CoffeeScript we will always assign anonymous functions to some variables
   */

  greet = function(name) {
    updateSomething();
    return changeSomthing();
    console.log("Hello, " + name);
    return processSomething();
  };

  normalize = function() {
    var length, vectors;
    length = arguments[0], vectors = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  };

  outer = 10;

  func = function() {
    var inner;
    outer = 10;
    inner = 20;
  };

  show(update(object, 10, 20));

  show(update(object, 10, 20), true);

  show();

  show();

  (function() {
    return something();
  });

  (function() {
    return something();
  })();

  if (isReady) {
    activate(something);
    if (!isFull) {
      append(something);
    }
  } else {
    prepare();
  }

  if (isReady) {
    activate(something);
  }

  if (isReady) {
    activate(something);
  }

  if (!isReady) {
    append(something);
  }

  if (!isReady) {
    append(something);
  }

  if (!isFull) {
    prepare();
  }

  action = mode === 'idle' ? 'sleep' : 'wander';

  show(message ? mesage : warning);

  switch (state) {
    case 0:
      message = 'request not initialized';
      break;
    case 1:
      message = 'server connection established';
      break;
    case 2:
      message = 'request received';
      break;
    case 3:
      message = 'processing request';
      break;
    case 4:
      message = 'request finished and response is ready';
      break;
    default:
      message = 'unknown state';
  }

  message = (function() {
    switch (state) {
      case 0:
        return 'request not initialized';
      case 1:
        return 'server connection established';
      case 2:
        return 'request received';
      case 3:
        return 'processing request';
      case 4:
        return 'request finished and response is ready';
      default:
        return 'unknown state';
    }
  })();

  console.log("Message: [" + state + "] " + ((function() {
    switch (state) {
      case 0:
        return 'request not initialized';
      case 1:
        return 'server connection established';
      case 2:
        return 'request received';
      case 3:
        return 'processing request';
      case 4:
        return 'request finished and response is ready';
      default:
        return 'unknown state';
    }
  })()));

  while (isReady) {
    something();
  }

  while (isReady) {
    something();
  }

  while (!isReady) {
    append();
  }

  while (!isReady) {
    append();
  }

  while (!isReady) {
    prepare();
  }

  for (i = k = 10; k <= 20; i = k += 4) {
    update(i);
  }

  for (i = l = 10; l <= 20; i = ++l) {
    update(i);
  }

  for (i = m = 10; m <= 20; i = ++m) {
    update(i);
  }

  for (i = n = 10; n <= 20; i = ++n) {
    if (isPrime(i)) {
      console.log(i);
    }
  }

  for (i = o = 10; o <= 20; i = o += 2) {
    if (isPrime(i)) {
      console.log;
    }
  }

  for (i = p = 10; p <= 20; i = p += 2) {
    if (isPrime(i)) {
      primeNumbers = i;
    }
  }

  primeNumbers = (function() {
    var q, results1;
    results1 = [];
    for (i = q = 10; q <= 20; i = q += 2) {
      if (isPrime(i)) {
        results1.push(i);
      }
    }
    return results1;
  })();

  if (i) {
    primeNumbers = i;
  }

  for (q = 0, len = array.length; q < len; q++) {
    element = array[q];
    if (indexOf.call(rightElements, element) >= 0) {
      show(element);
    }
  }

  for (index = r = 0, len1 = array.length; r < len1; index = ++r) {
    element = array[index];
    if (indexOf.call(rightElements, element) >= 0) {
      remove_byIndex(index);
    }
  }

  for (property in object) {
    if (!hasProp.call(object, property)) continue;
    value = object[property];
    console.log(value);
  }

  for (property in object) {
    console.log(object[property]);
  }

  ref5 = ['click', 'mouseover', 'mouseout', 'focus'];
  fn = function(event) {
    mySuperLibrary.prototype["on" + event] = function(callback) {
      mySuperLibrary.prototype.on(event, callback);
    };
  };
  for (s = 0, len2 = ref5.length; s < len2; s++) {
    event = ref5[s];
    fn(event);
  }

  Person = (function() {
    function Person(name1, age1) {
      this.name = name1;
      this.age = age1;
    }

    Person.prototype.getInfo = function() {
      return "Name: " + this.name + ", age: " + this.age;
    };

    Person.myStaticFunc = function() {
      return something();
    };

    Person.myStaticValue = 20;

    return Person;

  })();

  WebDeveloper = (function(superClass) {
    extend(WebDeveloper, superClass);

    function WebDeveloper() {
      WebDeveloper.__super__.constructor.call(this, 10, 20, 30);
      something();
    }

    WebDeveloper.prototype.getInfo = function() {
      WebDeveloper.__super__.getInfo.call(this, arg1, arg2);
      return console.log('getInfo');
    };

    WebDeveloper.prototype.myMethod = function() {
      var _this;
      _this = this;
      return someFunc(function() {
        return process(_this.age);
      });
    };

    WebDeveloper.prototype.myMehodThatAddThisAutomaticaly = function() {
      return someFunc((function(_this) {
        return function() {
          return process(_this.age);
        };
      })(this));
    };

    return WebDeveloper;

  })(Person);

  Person.prototype.myCoolMethod = function() {
    return say('hi');
  };


  /*
    Practical Example CoffeeScript
   */

}).call(this);
