// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var Animal, age, arr, canRead, cat, colors, count, func1, func2, i, j, k, l, len, len1, name, person, prop, results, x,
    hasProp = {}.hasOwnProperty;

  name = 'John';

  age = 26;

  arr = [1, 2];

  func1 = function() {
    return console.log('hello');
  };

  func2 = function(data) {
    if (data == null) {
      data = 'hello';
    }
    return console.log(data);
  };

  func2();

  a === b;

  a !== b;

  !d && a || b;

  true;

  true;

  true;

  false;

  false;

  false;

  this;

  this;

  val in obj;

  age = 15;

  if (age > 18) {
    console.log('enter');
  }

  if (!age > 18) {
    console.log('enter');
  }

  if (!(age > 18)) {
    console.log('enter');
  }

  if (age > 18) {
    console.log('enter');
  } else {
    console.log('not enter');
  }

  if (canRead) {
    canRead = true;
  }

  if (canRead != null) {
    canRead = true;
  }

  name = '';

  if (name == null) {
    name = 'John';
  }

  switch (str) {
    case 'a':
      name = 'Alex';
      break;
    case 'b':
      name = 'Bob';
      break;
    case 'c':
      name = 'Con';
      break;
    default:
      name = 'defa';
  }

  x = 0;

  while (x < 5) {
    x++;
  }

  while (!(x < 5)) {
    x--;
  }

  for (count = i = 10; i < 20; count = i += 2) {
    if (count % 2 === 0) {
      console.log(count);
    }
  }

  for (j = 0, len = names.length; j < len; j++) {
    name = names[j];
    console.log(name);
  }

  for (k = 0, len1 = names.length; k < len1; k++) {
    name = names[k];
    if (name !== 'John') {
      console.log(name);
    }
  }

  for (prop in obj) {
    if (!hasProp.call(obj, prop)) continue;
    console.log(obj[prop]);
  }

  arr = (function() {
    results = [];
    for (l = -10; l < 20; l++){ results.push(l); }
    return results;
  }).apply(this);

  colors = ['black', 'green'];

  person = {
    name: 'Bob',
    age: 20,
    hello: function() {
      return console.log('hello' + this.name);
    },
    animals: {
      cat: true,
      dog: true,
      mouse: true,
      hello: function() {
        return console.log(this.dog + this.cat);
      }
    }
  };

  person.hello();

  Animal = (function() {
    var ctor;

    function Animal() {
      return ctor.apply(this, arguments);
    }

    ctor = name(function() {
      return this.name = name;
    });

    Animal.hello = function() {
      return console.log("hello, " + this.name);
    };

    Animal.prototype.hello = function() {
      return console.log(Animal.hello());
    };

    return Animal;

  })();

  cat = new Animal('cat');

}).call(this);
