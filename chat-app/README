Introduction
============

Description
The Node.js app - a simple public chat where authenticated users can post text and everyone, who is authenticated too, can read and write posts. Posts are stored in the database and users can get and create posts by using the REST API.

Notice
===================

- We have 2 servers - one for authorization `authserver` and another one `websockets` - server for chat using websockets
- Documentation is made using swagger: all the routers are described in files `docs/api.yml` - accordingly to the servers API
- These servers are independent and I tried to make `microservices architecture`, and compose them up using `docker-compose`, but it was not successfull. `Dockerfiles` are in each folder, and `docker-compose.yml` is present too.
- Test are in folder `test/api` - for authorization server. I used `chai`. Before running tests `npm run test` make sure that user name, password and refresh token was saved to database.
- Used JWT Authentication and Authorization
- Used not relational database `MongoDB` for saving posts
- Integrated `Jenkins` with `Github`: build after each commit - trigger a build every time you make a commit to `Github`

Intallation
===================

-`git clone https://github.com/RV8V/Chat.git`
-`cd Chat`
-`cd authserver && npm i`
-`npm run start:auth` - run authServer

Open new terminal to run another server:
-`cd websocket && npm i`
-`npm run start:websocket` - run chat server

Usage
===================

- Run two servers. When users are authenticated - open several chat windows and try to make post - there is reference `make post`. For example, one user make a post and others can read it and so on. This picture describes how to do that.
- So that you can fill the form to make post or write messages like in a usual chat

License and Authors
===================

Author:: Ruslan Volovik <rv.volovik88@gmail.com>
