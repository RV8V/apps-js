Introduction
============

Description
Documentation

Intalation
===================

- `git clone https://github.com/RV8V/News-Task.git`
- `cd News-Task && npm i`
- `bash firstrun.sh` - run 2 containers: mongo and redis
- `npm run start:auth` - run server
- `npm run test` - run test

Notice
===================

- If you have problems starting bash script `firstrun.sh`, enter this comman `sed -i 's/\r$//g' firstrun.sh`
- Open browser and enter `http://localhost:3000/render/register`
- After registration, log in to get accessToken, refreshToken and userId for later usage
- Use postman to check result (make sure that in headers you have key `authorization` and value `Bearer your access token`! When your access token expires, you can use refresh token that you have after logged in, to get new access token for later usage)
- Before running bash script make sure that ports: redis `6379` and mongo `271017` are not blocked
- Documentation is made using swagger: all the routers are described in files `docs/api.data.yml` and `docs/api.auth.yml` - accordingly to the API
- Used JWT Authentication and Authorization
- Used not relational database `MongoDB` for saving news and `Redis` for caching

What to change:
===================

-decompose logic: seperate bussiness logic and controllers layer (src/controllers/user.js)
-write more test for routes related to getting data
-rewrite some functionality because there are similar code
-rewrite on nestjs because of futher maintenance

Description
The Node.js app - crud operations with authorization.

Intalation
===================

-`https://github.com/RV8V/News-Task.git`
-`cd News-Task && npm i`
-`bash firstrun.sh` - run 2 containers: mongo and redis
-`npm run start:auth` - run server
-`npm run test` - run test

Notice
===================

- Before running bash script make sure that ports: redis `6379` and mongo `271017` are not blocked
- Documentation is made using swagger: all the routers are described in files `docs/api.data.yml` and `docs/api.auth.yml` - accordingly to the API
- Used JWT Authentication and Authorization
- Used not relational database `MongoDB` for saving news and `Redis` for caching

What to change:
===================

-decompose logic: seperate bussiness logic and controllers layer (src/controllers/user.js)
-write more test for routes related to getting data
-rewrite some functionality because there are similar code
-rewrite on nestjs because of futher maintenance

Task Tracker
## Description
The Node.js app - a simple task tracker with task management through the API.

Intallation
===================

- `git clone https://github.com/RV8V/Task-Tracker.git`
- `cd Task-Tracker && npm i`
  - `sudo mysql -u root -p`
  - `create database databasename;`
  - `exit`
  - `sudo mysql -u root -p databasename < path to file mysql.sql`
- `npm run start`

Notice
===================

Configure database for your needs in file `config/database.js`
## API Routes
-`/user/createUser`
-`/user/getRecords`
-`/user/deleteUser`
-`/user/update`
-`/task/createTask`
-`/task/getFilteredTasks/:status`
-`/task/changeTaskExecutor`
-`/task/changeTaskStatus`
-`/task/changeTask`
-`/task/deleteTask`

News Parser
## Description
Parser, which in parallel mode from the [ain.ua](https://ain.ua/) website will save the last five articles from different categories to the relational database Postgres.

Intallation
===================

- `git clone https://github.com/RV8V/News-parser.git`
- `cd News-parser && npm i`
- `npm run start`

- `git clone https://github.com/RV8V/News-parser.git`
- `cd News-parser && npm i`
  - `sudo -iu postgres`
  - `psql`
  - `create database database;`
- `npm run start`

Task
## Description
The Node.js app - a simple public chat where authenticated users can post text and everyone, who is authenticated too, can read and write posts. Posts are stored in the database and users can get and create posts by using the REST API.

Notice
===================

- We have 2 servers - one for authorization `authserver` and another one `websockets` - server for chat using websockets
- Documentation is made using swagger: all the routers are described in files `docs/api.yml` - accordingly to the servers API
- These servers are independent and I tried to make `microservices architecture`, and compose them up using `docker-compose`, but it was not successfull. `Dockerfiles` are in each folder, and `docker-compose.yml` is present too.
- Test are in folder `test/api` - for authorization server. I used `chai`. Before running tests `npm run test` make sure that user name, password and refresh token was saved to database.
- Used JWT Authentication and Authorization
- Used not relational database `MongoDB` for saving posts
- Integrated `Jenkins` with `Github`: build after each commit - trigger a build every time you make a commit to `Github`

Intalation
===================

-`git clone https://github.com/RV8V/Chat.git`
-`cd Chat && npm i`
-`cd authserver && npm i`
-`cd websocket && npm i`
-`npm run start:auth` - run authServer
-`npm run start:websocket` - run chat server

Usage
===================

- Run two servers. When users are authenticated - open several chat windows and try to make post - there is reference `make post`. For example, one user make a post and others can read it and so on. This picture describes how to do that.
- So that you can fill the form to make post or write messages like in a usual chat

Task
## Description
Metadata extractor for all the project Gutenberg titles

Installation
===================

- `git clone https://github.com/RV8V/Task_`
- `cd Task_ && npm i`
  - `sudo -iu postgres`
  - `psql`
  - `create database db;`
  - `\q`
  - `psql -U postgres -d db -af '_database.sql';` (enter full path to file `_database.sql`)
  - `exit`
- `npm run start`
- `npm run test`

Notice:
===================

- Extract folder `epub` from https://www.gutenberg.org/cache/epub/feeds/rdf-files.tar.zip that needs to be processed later. After that `drag it into this application`!
- time of processing is approximately 7 minutes using workers
- each method except `then` returns instance of class `Cursor` so that we can do chaining
- see file `usage.js` for getting data from database
```js
const database = require('./lib/builder')
const config = require('./config/database')

const pg = database.open(config)
// usage
pg.select('author')
  .fields(['title', 'authorname', 'data'])
  .join('publisher', 'id')
  .join('book', 'id', null, 'left')
  .limit(2, 4)
  .then(rows => {
    console.table(rows);
    pg.close();
  })
```

## Methods in my quary builder for later querying
- `select` for choosing needed table.
Parameters:
-`table name`

- `fields` for choosing needed fields in table.
Parameters:
-`table fields`

- `join` for joining tables.
Parameters:
-`table name`
-`field`
-`linkTo` - reference to another field (optional)
-`type` - type of join (`inner`, `left`, `right`) (optional)

- `limit` for choosing fixed number of records in table.
Parameters:
-`limit`
-`offset`

- `then` to fire all previous calls.
Parameters:
-`callback`
Returns: gives result in callback function

`Notice`:
-each method except `then` returns instance of class Cursor so that we can do chaining
-folder `epub` needs to be in application for processing
-time of processing is approximately 7 minutes using workers

Response:
- `status`: HTTP status code.
- `error`: is `null` if `status: 200`, is `{ message: "Error message" }` otherwise;
- `data`: object containing the following response fields:
  - `token`: access token for `/api/email` route;
  - `avatar`: avatar URL;
  - `thumbnail`: thumbnail URL.

Course Parser
## Description
First part of this task:
===================

- Implement loading of course archive from `http://api.bestchange.ru/info.zip` and take data from file `bm_rates.dat`
A file consists of a set of lines, like: `117;89;454;66.82258603;1;123638.43;0.2506;1`, where `first number` is ID of sent currency, `second` - received currency, `fourth` - departure?/sending rate && `fifth` - receiving rate
- Find the most favorable rate for each currency pair, that is, the exchange rate of the exchanger that comes first in every currency pair in [BestChange](https://www.bestchange.ru/)
- Accordingly, write all the favorable courses to the database

Second part:
===================

- Write a REST API for getting all the profitable courses, so that realize two methods:
-`GET/courses` - getting all the courses with filtering: sent currency and received currency.
-`GET/course/send_currency/recive_currency` - obviously

Besides all the? requests must be signed with a token.

Installation
===================

- `git clone https://github.com/romanV7/Task`
- `cd Task && npm i`
- `npm run start`

API routes
===================

### `/courses`
Route for getting all the courses with filtering: sent currency and received currency.

Parameters:
- `sent currency`
- `received currency`

Note: "Sign up" form type has to be `multipart/form-data` to handle file upload correctly.

Response:
- `status`: HTTP status code.
- `error`: is `null` if `status: 200`, is `{ message: "Error message" }` otherwise;
- `data`: object containing the following response fields:
  - `token`: access token for `/api/email` route;
  - `avatar`: avatar URL;
  - `thumbnail`: thumbnail URL.

### `/course/send_currency/recive_currency`
Route to get, according to received params, the most favorable rate for each currency pair
Parameters:
- `sent currency`
- `received currency`

Response:
- `status`: HTTP status code.
- `error`: is `null` if `status: 200`, is `{ message: "Error message" }` otherwise;
- `data`: object containing the following response fields:
  - `session`:
    - `token`: access token for `/api/email` route;
    - `expires`: token expiration time;
  - `user`:
    - `email`: user email;
    - `password`: encrypted password;
    - `avatar`: avatar URL;
    - `thumbnail`: thumbnail URL.

### `/api/email`
Route to send e-mails to GitHub users for a logged in user.
Parameters:
- `users`: comma-separated list of recipients;
- `text`: message to send;
- `token`: access token received from whether `/api/sign-up` or `/api/sign-in`.

Response:
- `status`: HTTP status code.
- `error`: is `null` if `status: 200`, is `{ message: "Error message" }` otherwise;
- `data`: array containing data about every sent email.

Task 2
## Description
The same task but using TypeScript. I wanted to rewrite JS but I have never tried TS before. Here is the what I have done.

Description
NodeJS application to process images in parallel

Restrictions:
===================

- file formats: png, jpeg
- target size / watersign should be in config-file
- should be used threads or subprocesses

Input:
===================

- flat folder with 1k files

Output:
===================

- folder with processed images
- map of origin/processed files if renaming planned

Processing types:
===================

- resize img
- add watersign

Installation
===================

- `git clone https://github.com/RV8V/Task_2`

Usage
===================

-Upload 1k files using Postman:
- Firstly, download and setup service [Postman](https://www.postman.com/)
- Secondly, after downloading start server using command: `node server.js` and upload files from folder `uploads` via Postman (this folder I sent you via Telegram)
- Check port `3000` and route `upload` - see this picture

-Before starting execution make sure that folder `uploads` is in `src`
-Start processing images: `npm run start`
-Check`images` - new folder in `src`

Notice:
===================

Execution approximately 5 min, folder `uploads` 250 megabytes

Concepts covered:
===================

-Image Resizing
-Watermark Adding
-Execution task in parallel
-Dividing tasks between subprocesses

JWT based user authentication.
## Description
We have two servers:
first one is `server.js`, which handles all of our creation, deletion and refreshen of tokens and another server - `authServer.js` servers to handle our specific usecase of getting, saving post, all of our different API related tasks but not authentication.
### How to use: see `requests.md` file
Concepts covered:
===================

-How to use JWT
-Creating Node.js authentication middleware
-Using refresh tokens with JWT
-Authentication users with JWT
-Invalidating refresh tokens to log users out
-Using MongoDB & Mongoose

Passport-Local
## Description
Authentication using username and password
### How to use: see `requests.md` file
Concepts Covered:
===================

-Setting up a server with Node.js and Express
-Setting up Passport with Node.js and Express
-How to encrypt user passwords
-Restricting access to routes to only logged in users
-Showing flash messages with Node.js and Express

Usage
===================

```html
GET http://localhost:3000/posts
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSmltIiwiaWF0IjoxNTY4NzU5ODEyLCJleHAiOjE1Njg3NTk4Mjd9.0i6Im2gKz7jj8wM7aZZzOPaBS_xHoZWAqBwnldn-lQQ
```
```html
DELETE http://localhost:4000/logout
Content-Type: application/json
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSmltIiwiaWF0IjoxNTY4NzU5OTIyfQ.RT6wszuCeFLwC_6ksmNMIELxiC5s-uRivfRxyZof5ag"
}
```
```html
POST http://localhost:4000/token
Content-Type: application/json

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSmltIiwiaWF0IjoxNTY4NzU5OTIyfQ.RT6wszuCeFLwC_6ksmNMIELxiC5s-uRivfRxyZof5ag"
}
```
```html
POST http://localhost:4000/login
Content-Type: application/json

{
  "username": "Jim"
}
```
Built With
===================

* [Node.js](https://www.google.com)
* [Docker](https://www.google.com)
* [Express](https://www.mongodb.com/cloud/atlas)

Built With
===================

* [Node.js](https://nodejs.org/en/) - JavaScript environment
* [Docker](https://www.docker.com/) - Container technology used to package up an application with all of the parts it needs
* [Express](http://expressjs.com/) - The web framework used
* [Nginx](https://nginx.org/en/) - Web server used as a reverse proxy

Description
===================

RESTful API with Node.js

Built With
===================

* [Node.js](https://nodejs.org/en/) - JavaScript environment
* [Express](http://expressjs.com/) - The web framework used
* [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) - The global cloud database service

What will I build
===================

My API will have a couple of resources, I want to build an api that's realistic and that contains something which are typical to restful apis.
For this, I will have a product's resource so /products - is one route we can target. And there I want to support GET request to get a list of all the products we have, POST request to add new products, also want to be able to target an individual product by id and get information about that product, patch that product so change it updated, delete this product so that we can get rid of it.
Besides, want also implement our order's resource where we can place orders. So where we, for example, could get a list of all the orders we have, also I want to be able to post a new order so create a new order, want to access my individual order and just like for products - get more information about it. And not patch it, we should not be able to edit our orders but we could delete, so cancel them.
Also add authentication to make sure that some of these routes of these endpoint are protected, so that only logged in users can access them and therefore I have also learned how to log users in when building a restful api because we can not use sessions so that that will not work.
That is what I want to build.

Concepts covered:
===================

-Parse the Body & Handling CORS
-Using MongoDB & Mongoose validation
-Managing orders with Mongoose
-Uploading an Image
-Adding user Signup
-JWT Route Protection

Description
Test project using microservices
===================

I have done this project in order to understand what microservices are, how I can make them and how actually orchestrate them together. That is basically what I'm going for here
You see that I have a directory called: books, search, videos, web. Each of there are full-fledged applications, each one of these directories is actually an entire system in of itself. It has its own server, source, its own dependancies - all that.
So that my project is a project of projects and that's where the micro part of all this comes in.
I like to call these directories: books, videos and this type of very natural domain-driven terms which are very closely tied to different entities within your system, I'd like to think of them as a domain services that handle every specific data structure or a data type in your system. And microservice search which is like an aggregate or a consumer that just talks througth other services to provide some type of value.
Instead of putting all of that code into one single project, I have sliced these natural pieces up to very small projects and then make them work together as a distributed system
I have made it just for learning. If this is a small project, all of this code should be in a monolithic application there is no reason to slice up something this small into microservices.
It is not really proportional to this problem.

Installation
===================

```html
git clone https://github.com/RV8V/microservices
```
```html
cd microservices
```
```html
docker-compose up -d
```
* Check port 3000

Dependency
===================

Used my npm package 'dependency-for-microservice' for better security.
 * [dependency-for-microservice](https://www.npmjs.com/package/dependency-for-microservice)

Notice that we have duplicated our models from the other services - this is bad, we have to extract the common code in to a npm module that we can then import in to our project just like any other package.

The thing is that search does not require its own database, it does not require its own model in like a very basic example - it does not need it. But what we bo need - is to know how to basically get data from the database, we need to be able to need what the other services that we want to be able to search for. We need to have some type of connection.
The idea is - have common code. If everythimg running on Node.js and we have things that need to be shared between different modules or different microservices. So that I put it in a npm package.
That makes it very easy for us to move common code amongst our projects, we do not have to copy and paste duplicate.
Because this is very dangerous - for example, I changed the book's module in my book's microservice, then I have to make sure that I'm changing it is /search/src/app.js as well.

Dependency
===================

Used my npm package 'dependency-for-microservice' for better security.
 * [dependency-for-microservice](https://www.npmjs.com/package/dependency-for-microservice)

JWT based user authentication.
Description
We have two servers:
first one is `server.js`, which handles all of our creation, deletion and refreshen of tokens and another server - `authServer.js` servers to handle our specific usecase of getting, saving post, all of our different API related tasks but not authentication.
### How to use: see `requests.md` file
Concepts covered:
===================

-How to use JWT
-Creating Node.js authentication middleware
-Using refresh tokens with JWT
-Authentication users with JWT
-Invalidating refresh tokens to log users out
-Using MongoDB & Mongoose

Built With
===================

* [Node.js](https://nodejs.org/en/) - JavaScript environment
* [Docker](https://www.docker.com/) - Container technology used to package up an application with all of the parts it needs
* [Express](http://expressjs.com/) - The web framework used
* [Nginx](https://nginx.org/en/) - Web server used as a reverse proxy

License and Authors
===================

Author:: Ruslan Volovik <rv.volovik88@gmail.com>
